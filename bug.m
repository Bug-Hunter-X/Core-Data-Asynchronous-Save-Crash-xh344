In Objective-C, a common yet subtle issue arises when dealing with `NSManagedObjectContext` and asynchronous operations.  Consider a scenario where you fetch data from a Core Data store within a background thread. You might update the fetched objects and then attempt to save the context directly on that background thread. This will often lead to unexpected crashes or data corruption. The problem is that the main thread holds a lock that prevents other threads from directly modifying the managed object context, leading to exceptions. This issue is often missed because you may not see crashes immediately, especially if the issue involves concurrency and timing.  It could manifest as intermittent failures in data synchronization or persistence.